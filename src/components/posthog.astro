---

---

<script is:inline>
  !(function (t, e) {
    var o, n, p, r;
    e.__SV ||
      ((window.posthog = e),
      (e._i = []),
      (e.init = function (i, s, a) {
        function g(t, e) {
          var o = e.split(".");
          2 == o.length && ((t = t[o[0]]), (e = o[1])),
            (t[e] = function () {
              t.push([e].concat(Array.prototype.slice.call(arguments, 0)));
            });
        }
        ((p = t.createElement("script")).type = "text/javascript"),
          (p.crossOrigin = "anonymous"),
          (p.async = !0),
          (p.src =
            s.api_host.replace(".i.posthog.com", "-assets.i.posthog.com") +
            "/static/array.js"),
          (r = t.getElementsByTagName("script")[0]).parentNode.insertBefore(
            p,
            r
          );
        var u = e;
        for (
          void 0 !== a ? (u = e[a] = []) : (a = "posthog"),
            u.people = u.people || [],
            u.toString = function (t) {
              var e = "posthog";
              return (
                "posthog" !== a && (e += "." + a), t || (e += " (stub)"), e
              );
            },
            u.people.toString = function () {
              return u.toString(1) + ".people (stub)";
            },
            o =
              "init Ie Ts Ms Ee Es Rs capture Ge calculateEventProperties Os register register_once register_for_session unregister unregister_for_session js getFeatureFlag getFeatureFlagPayload isFeatureEnabled reloadFeatureFlags updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures on onFeatureFlags onSurveysLoaded onSessionId getSurveys getActiveMatchingSurveys renderSurvey canRenderSurvey canRenderSurveyAsync identify setPersonProperties group resetGroups setPersonPropertiesForFlags resetPersonPropertiesForFlags setGroupPropertiesForFlags resetGroupPropertiesForFlags reset get_distinct_id getGroups get_session_id get_session_replay_url alias set_config startSessionRecording stopSessionRecording sessionRecordingStarted captureException loadToolbar get_property getSessionProperty Ds Fs createPersonProfile Ls Ps opt_in_capturing opt_out_capturing has_opted_in_capturing has_opted_out_capturing clear_opt_in_out_capturing Cs debug I As getPageViewId captureTraceFeedback captureTraceMetric".split(
                " "
              ),
            n = 0;
          n < o.length;
          n++
        )
          g(u, o[n]);
        e._i.push([i, s, a]);
      }),
      (e.__SV = 1));
  })(document, window.posthog || []);

  // Initialize PostHog
  posthog.init("phc_NqiGUIXWaL0Bl2nE3UI34zpJLlOd7k60JyOSgHq3VWc", {
    api_host: "https://eu.i.posthog.com",
    defaults: "2025-05-24",
    person_profiles: "identified_only",
    capture_pageview: false, // Disable automatic pageview capture since we'll handle it manually
    debug: false, // Set to true for debugging
  });

  // Debug function
  function debugLog(message, data) {
    if (window.posthog && window.posthog.debug) {
      console.log("[PostHog Debug]", message, data);
    }
  }

  // Track page view with comprehensive data
  function trackPageView(url, title, referrer) {
    if (typeof window !== "undefined" && window.posthog) {
      const pageData = {
        $current_url: url || window.location.href,
        $pathname: new URL(url || window.location.href).pathname,
        $title: title || document.title,
        $referrer: referrer || document.referrer,
        $host: window.location.host,
        $search: window.location.search,
        $hash: window.location.hash,
      };

      debugLog("Tracking pageview", pageData);
      posthog.capture("$pageview", pageData);
    }
  }

  // Track initial page view when DOM is ready
  function trackInitialPageView() {
    trackPageView();
  }

  // Initialize tracking when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", trackInitialPageView);
  } else {
    trackInitialPageView();
  }

  // Track navigation events
  if (typeof window !== "undefined") {
    let currentUrl = window.location.href;
    let navigationTimeout;

    // Debounced page view tracking
    function debouncedTrackPageView() {
      clearTimeout(navigationTimeout);
      navigationTimeout = setTimeout(function () {
        const newUrl = window.location.href;
        if (newUrl !== currentUrl) {
          currentUrl = newUrl;
          trackPageView();
        }
      }, 100);
    }

    // Track on popstate (back/forward navigation)
    window.addEventListener("popstate", debouncedTrackPageView);

    // Track on pushstate/replacestate (programmatic navigation)
    const originalPushState = history.pushState;
    const originalReplaceState = history.replaceState;

    history.pushState = function (...args) {
      originalPushState.apply(history, args);
      debouncedTrackPageView();
    };

    history.replaceState = function (...args) {
      originalReplaceState.apply(history, args);
      debouncedTrackPageView();
    };

    // Track clicks on internal links (for Astro's static navigation)
    document.addEventListener("click", function (e) {
      const target = e.target.closest("a");
      if (
        target &&
        target.href &&
        target.href.startsWith(window.location.origin) &&
        !target.target &&
        !target.hasAttribute("download")
      ) {
        // Track the navigation immediately
        trackPageView(target.href, document.title, window.location.href);

        // Also track as a custom event for better analytics
        posthog.capture("internal_link_clicked", {
          link_url: target.href,
          link_text: target.textContent?.trim() || "",
          current_page: window.location.pathname,
        });
      }
    });

    // Track when page becomes visible (for better SPA tracking)
    document.addEventListener("visibilitychange", function () {
      if (!document.hidden) {
        // Page became visible, track as a page view
        trackPageView();
      }
    });
  }
</script>
